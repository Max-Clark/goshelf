openapi: "3.1.0"
info:
  title: "goshelf"
  description: |-
    This is the REST API definition for goshelf, a demo I (Max Clark) created for my Canonical assessment. Thanks for viewing!
  contact:
    email: "clark.max.a@gmail.com"
  license:
    name: "MIT"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0/api/v1"

# /api/v1/book:
#     GET - lists books (optional filter)
#     POST - create book
# /api/v1/books/{id}
#     GET - get book
#     DELETE - delete book
# /api/v1/collection:
#     GET - lists collections (no filter)
#     POST - create collection
# /api/v1/collection/{id}
#     GET - get collection
#     DELETE - delete collection

paths:
  /book:
    get:
      tags:
        - Books
      summary: Searches and returns a list of books based on query values
      description: |
        Returns a list of books based on query values. If no query parameters match the parameters below, 
        all books are returned. If no books found with query, an empty array is returned and is considered a successful operation.
      operationId: BookFilter
      parameters:
        - $ref: "#/components/parameters/TitleQuery"
        - $ref: "#/components/parameters/EditionQuery"
        - $ref: "#/components/parameters/GenreQuery"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/DefaultStatusReturn' 
                  - type: object
                    properties:
                      metadata:
                        type: object
                        properties:
                          books:
                            $ref: '#/components/schemas/Books' 
components:
  parameters:

    TitleQuery:
      name: title
      in: query
      description: A case-independent in-string search for title
      schema: 
        $ref: '#/components/schemas/Title' 
      required: false
        
    EditionQuery:
      name: edition
      in: query
      description: An integer search for edition
      schema: 
        $ref: '#/components/schemas/Edition' 
      required: false
        
    GenreQuery:
      name: genre
      in: query
      description: A case-independent in-string search for genre
      schema: 
        $ref: '#/components/schemas/Genre' 
      required: false
  schemas:
    # Main schemas
    Book:
      type: "object"
      properties:
        book_id:
          $ref: "#/components/schemas/Serial"
        author_id:
          $ref: "#/components/schemas/Serial"
        timestamp:
          $ref: "#/components/schemas/Timestamp"
        title:
          allOf:
            - $ref: "#/components/schemas/Title"
            - example: "My favorite books"
        author:
          $ref: "#/components/schemas/Author"
        publish_date:
          $ref: "#/components/schemas/Date"
        edition:
          $ref: "#/components/schemas/Edition"
        genre:
          $ref: "#/components/schemas/Genre"
        description:
          $ref: "#/components/schemas/Description"
      required:
        - "title"
        - "author"

    Books:
      type: "array"
      items:
        $ref: "#/components/schemas/Book"

    Author:
      type: "object"
      properties:
        author_id:
          $ref: "#/components/schemas/Serial"
        first_name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - example: "Francis"
        last_name:
          allOf:
            - $ref: "#/components/schemas/Name"
            - example: "Fitzgerald"

    Collection:
      type: "object"
      properties:
        title:
          allOf:
            - $ref: "#/components/schemas/Title"
            - example: "My favorite books"
        books:
          type: "array"
          items:
            $ref: "#/components/schemas/Book"

    # Sub schemas
    Serial:
      type: "integer"
      minimum: 1
      readOnly: true

    Timestamp:
      type: "string"
      # not sure if this will be RFC3339 which
      # date-time is based on
      format: "date-time"
      readOnly: true

    Date:
      type: "string"
      # not sure if this will be RFC3339 which
      # date-time is based on
      format: "date"

    Description:
      type: "string"
      minLength: 1
      maxLength: 32767
      example: "A sentence within the description"

    Edition:
      type: "integer"
      minimum: 1
      maximum: 32767
      example: 1

    Title:
      type: "string"
      minLength: 1
      maxLength: 255
      example: "The Great Gatsby"

    Genre:
      type: "string"
      minLength: 1
      maxLength: 255
      example: "mystery"

    Name:
      type: "string"
      minLength: 1
      maxLength: 255
